{"version":3,"sources":["head.js","out.js","App.js","serviceWorker.js","index.js"],"names":["Head","react_default","a","createElement","className","Out","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","back","bind","assertThisInitialized","new","data","car_plate","width","src","window","location","origin","image_path","onClick","lib_default","size","spinnerColor","spinnerWidth","visible","Component","App","state","pictures","files","uploading","out","onDrop","next","picture","setState","concat","_this2","forEach","pic","URL","createObjectURL","document","getElementById","innerText","e","_this3","length","currentTarget","formData","FormData","append","Axios","post","headers","content-type","then","res","compiled_default","withIcon","buttonText","onChange","imgExtension","maxFileSize","singleImage","map","file","i","key","alttext","id","out_Out","Boolean","hostname","match","ReactDOM","render","head","App_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wNAUeA,MARf,WACE,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iDACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0EAAd,+FCFaC,cACjB,SAAAA,EAAaC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,KAAOP,EAAKO,KAAKC,KAAVP,OAAAQ,EAAA,EAAAR,CAAAD,IAFIA,sEAMhBG,KAAKJ,MAAMW,uCAKX,OACIhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAEPM,KAAKJ,MAAMY,KAAKjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAC/BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUM,KAAKJ,MAAMY,KAAKA,KAAKC,WAC9ClB,EAAAC,EAAAC,cAAA,OAAKiB,MAAM,OAAOC,IAAKC,OAAOC,SAASC,OAAO,IAAId,KAAKJ,MAAMY,KAAKA,KAAKO,aACvExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAOH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBsB,QAAShB,KAAKI,MAAlD,eAErBb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAMH,EAAAC,EAAAC,cAACwB,EAAAzB,EAAD,CAAS0B,KAAM,IAAKC,aAAc,KAAMC,aAAc,EAAGC,SAAS,aApB3EC,8BCEZC,cACjB,SAAAA,EAAY3B,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuB,IACf1B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyB,GAAApB,KAAAH,KAAMJ,KACD4B,MAAQ,CACTC,SAAU,GACVC,MAAM,GACNC,WAAU,EACVC,IAAI,MAER/B,EAAKgC,OAAShC,EAAKgC,OAAOxB,KAAZP,OAAAQ,EAAA,EAAAR,CAAAD,IACdA,EAAKiC,KAAOjC,EAAKiC,KAAKzB,KAAVP,OAAAQ,EAAA,EAAAR,CAAAD,IACZA,EAAKO,KAAOP,EAAKO,KAAKC,KAAVP,OAAAQ,EAAA,EAAAR,CAAAD,IAVGA,sEAaZkC,GAEH/B,KAAKgC,SAAS,CACVP,SAAUzB,KAAKwB,MAAMC,SAASQ,OAAOF,IACvC,WAAU,IAAAG,EAAAlC,KACRA,KAAKwB,MAAMC,SAASU,QAAQ,SAAAC,GACxBF,EAAKF,SAAS,CACVN,MAAOQ,EAAKV,MAAME,MAAMO,OAAOI,IAAIC,gBAAgBF,UAM/DG,SAASC,eAAe,eAAeC,UAAY,wCAElDC,GAAE,IAAAC,EAAA3C,KACH,GAA+B,GAA5BA,KAAKwB,MAAMC,SAASmB,OAEnBF,EAAEG,cAAcJ,UAAY,iCAE3B,CACDzC,KAAKgC,SAAS,CAACL,WAAU,IACzB,IAAImB,EAAW,IAAIC,SACnBD,EAASE,OAAO,YAAahD,KAAKwB,MAAMC,SAAS,IAMjDwB,IAAMC,KAAKtC,OAAOC,SAASC,OAAO,UAAUgC,EAL/B,CACTK,QAAQ,CACJC,eAAgB,yEAIvBC,KAAK,SAAAC,GACFX,EAAKX,SAAS,CAACJ,IAAI0B,sCAK3BtD,KAAKgC,SAAS,CAACL,WAAU,EAAKF,SAAS,GAAGC,MAAM,GAAGE,IAAI,wCAIvD,OACIrC,EAAAC,EAAAC,cAAA,WACCO,KAAKwB,MAAMG,UACZpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+CACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4CACfH,EAAAC,EAAAC,cAAC8D,EAAA/D,EAAD,CAAaE,UAAU,QAAQ8D,UAAU,EACjCC,WAAW,eACXC,SAAU1D,KAAK6B,OACf8B,aAAc,CAAC,OAAQ,OAAQ,OAAQ,QACvCC,YAAa,QACbC,aAAa,IACgB,GAA5B7D,KAAKwB,MAAMC,SAASmB,OAAU,GAAGrD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BAChDM,KAAKwB,MAAME,MAAMoC,IACd,SAACC,EAAKC,GACF,OAAQzE,EAAAC,EAAAC,cAAA,OAAKwE,IAAKD,EAAGtE,UAAU,aAC/BH,EAAAC,EAAAC,cAAA,OAAKyE,QAAQ,GAAGxD,MAAM,OAAOC,IAAKoD,SAMlDxE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,UAAQ0E,GAAG,cAAcnD,QAAShB,KAAK8B,KAAMpC,UAAU,mBAAvD,cAGJH,EAAAC,EAAAC,cAAC2E,EAAD,CAAK5D,KAAMR,KAAKwB,MAAMI,IAAKrB,IAAKP,KAAKI,eA/EhBkB,aCOb+C,QACW,cAA7BzD,OAAOC,SAASyD,UAEe,UAA7B1D,OAAOC,SAASyD,UAEhB1D,OAAOC,SAASyD,SAASC,MACvB,2DCXNC,IAASC,OAAOlF,EAAAC,EAAAC,cAACiF,EAAD,MAAUnC,SAASC,eAAe,SAC/CD,SAASC,eAAe,SAC3BgC,IAASC,OAAOlF,EAAAC,EAAAC,cAACkF,EAAD,MAASpC,SAASC,eAAe,SDwH3C,kBAAmBoC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.b277ed9b.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Head() {\n  return (\n    <div className=\"d-flex justify-content-center py-4 bg-primary\">\n        <h1 className=\"text-center border rounded border-success p-3 bg-white text-success h1\">IFind</h1>\n    </div>\n  );\n}\n\nexport default Head;\n","import React, { Component } from 'react';\nimport Spinner from 'react-spinner-material';\n\nexport default class Out extends Component {\n    constructor (props) {\n        super(props)\n        this.back = this.back.bind(this)\n    }\n    \n    back(){\n        this.props.new()\n    }\n\n\n    render () {\n        return (\n            <div className=\"d-flex col-12 p-3\">\n                {\n                    this.props.data?<div className=\"col-4\">\n                    <div className=\"h1 p-4\">{this.props.data.data.car_plate}</div>\n                    <img width=\"100%\" src={window.location.origin+\"/\"+this.props.data.data.image_path}/>\n                    <div className=\"py-3\"><button className=\"btn btn-primary\" onClick={this.back}>New Image</button></div>\n                    </div>\n                    :<div className=\"p-5\"><Spinner size={120} spinnerColor={\"#0\"} spinnerWidth={3} visible={true}/></div>\n                }\n            </div>\n        )\n    }\n}","import React, { Component } from 'react'\nimport './App.css'\nimport ImageUpload from 'react-images-upload';\nimport Out from './out.js';\nimport Axios from 'axios';\nexport default class App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            pictures: [],\n            files:[],\n            uploading:true,\n            out:null\n        };\n        this.onDrop = this.onDrop.bind(this);\n        this.next = this.next.bind(this);\n        this.back = this.back.bind(this);\n    }\n\n    onDrop(picture) {\n        \n        this.setState({\n            pictures: this.state.pictures.concat(picture),\n        },function(){\n            this.state.pictures.forEach(pic => {\n                this.setState({\n                    files: this.state.files.concat(URL.createObjectURL(pic))\n                });\n            });\n        });\n        \n        \n        document.getElementById('next_button').innerText = 'Continue';\n    }\n    next(e){\n        if(this.state.pictures.length==0)\n        {\n            e.currentTarget.innerText = \"Please Upload Images First\";\n        }\n        else {\n            this.setState({uploading:false});\n            var formData = new FormData();\n            formData.append('car_image', this.state.pictures[0]);\n            var config = {\n                headers:{\n                    'content-type': 'multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW'\n                }\n            }\n            Axios.post(window.location.origin+'/upload',formData,config)\n            .then(res=>{\n                this.setState({out:res});\n            });\n        }\n    }\n    back(){\n        this.setState({uploading:true,pictures:[],files:[],out:null});\n    }\n    render() {\n\n        return (\n            <div>\n            {this.state.uploading?\n            <div className=\"d-flex p-5 justify-content-center flex-wrap\">\n            <div className=\"p-4 col-12 d-flex justify-content-center\">\n            <ImageUpload className=\"col-6\" withIcon={true}\n                    buttonText='Choose image'\n                    onChange={this.onDrop}\n                    imgExtension={['.jpg', '.gif', '.png', '.gif']}\n                    maxFileSize={5242880}\n                    singleImage={true}></ImageUpload>\n                    {this.state.pictures.length==0?'':<div className=\"col-5 d-flex flex-wrap\">\n                    {this.state.files.map(\n                        (file,i)=>{\n                            return (<div key={i} className=\"col-4 p-3\">\n                            <img alttext=\"\" width=\"100%\" src={file}></img>\n                            </div>)\n                            })\n                            }\n                    </div>}\n            </div>\n            <div className=\"p-3\">\n                <button id=\"next_button\" onClick={this.next} className=\"btn btn-primary\">Continue</button>\n            </div>\n            </div>:\n            <Out data={this.state.out} new={this.back}/>}\n            </div>\n        )\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Head from './head';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Head />, document.getElementById('head'));\nif(document.getElementById('root'))\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}